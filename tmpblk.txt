        </Button>
      </div>
    );
  };

  const columnDefs: ColDef<TLRow>[] = [
    { headerName: 'Name', field: 'name', flex: 2, filter: filterForText, editable: false, cellRenderer: NameCellRenderer },
    { headerName: 'Role(s)', field: 'roles', flex: 2, filter: filterForText, editable: false, cellRenderer: RolesCellRenderer,
      valueGetter: (p) => Array.isArray(p.data?.roles) ? (p.data?.roles as string[]).join(', ') : (p.data?.roles as any || ''),
    },
    { headerName: 'Founder', field: 'founder', width: 120, editable: false, cellRenderer: FounderCellRenderer, 
      filter: filterForText,
      valueGetter: (p) => (p.data?.founder ? 'Yes' : 'No'),
    },
    { headerName: 'School email', field: 'emailAtSchool', flex: 2, filter: filterForText, editable: false,
      cellRenderer: (p: ICellRendererParams<TLRow>) => {
        const row = p.data as TLRow; const draft = getDraft(row);
        if (editingRowId === row.id) {
          return (
            <input
              type="email"
              className="h-7 w-full px-2 border rounded text-sm"
              value={draft.emailAtSchool || ''}
              onChange={(e) => setDrafts(prev => ({ ...prev, [row.id]: { ...draft, emailAtSchool: e.target.value } }))}
            />
          );
