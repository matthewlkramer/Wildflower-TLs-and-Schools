              </div>

              <div className="p-6">
                <TabsContent value="summary" className="mt-0">
                  <div className="space-y-6">
                    {/* Header Section with Logo and Key Info */}
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 shadow-sm">
                      <div className="flex items-start gap-6">
                        <div className="flex-shrink-0">
                          <div className="w-24 h-24 bg-white rounded-2xl shadow-md overflow-hidden flex items-center justify-center">
                            {(school.logoMainRectangle || school.logoMainSquare || school.logo) ? (
                              <img 
                                src={school.logoMainRectangle || school.logoMainSquare || school.logo} 
                                alt={`${school.name} logo`}
                                className="w-full h-full object-contain p-2"
                              />
                            ) : (
                              <div className="text-center">
                                <svg className="w-10 h-10 mx-auto text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                              </div>
                            )}
                          </div>
                        </div>
                        <div className="flex-1">
                          <div className="flex items-start justify-between">
                            <div>
                              <h2 className="text-2xl font-semibold text-gray-900">{school.name}</h2>
                              <p className="text-lg text-gray-600 mt-1">{school.shortName}</p>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                            <div>
                              <p className="text-xs text-gray-500 uppercase tracking-wider">Governance</p>
                              <p className="text-sm font-medium text-gray-900 mt-1">{school.governanceModel || 'Not specified'}</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500 uppercase tracking-wider">Ages Served</p>
                              <p className="text-sm font-medium text-gray-900 mt-1">{school.agesServed?.join(', ') || 'Not specified'}</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500 uppercase tracking-wider">Open Date</p>
                              <p className="text-sm font-medium text-gray-900 mt-1">{school.openDate || 'Not specified'}</p>
                            </div>
                            <div>
                              <p className="text-xs text-gray-500 uppercase tracking-wider">Membership</p>
                              <p className="text-sm font-medium text-gray-900 mt-1">{school.membershipStatus || 'Not specified'}</p>
                            </div>
                          </div>
                          {(school.about || school.aboutSpanish) && (
                            <div className="mt-4 pt-4 border-t border-gray-200">
                              <div className="flex items-center gap-2 mb-2">
                                <button
                                  type="button"
                                  onClick={() => setAboutLang('en')}
                                  className={`text-xs uppercase tracking-wider ${aboutLang === 'en' ? 'text-gray-700 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
                                >
                                  About
                                </button>
                                {school.aboutSpanish && (
                                  <>
                                    <span className="text-gray-300">•</span>
                                    <button
                                      type="button"
                                      onClick={() => setAboutLang('es')}
                                      className={`text-xs uppercase tracking-wider ${aboutLang === 'es' ? 'text-gray-700 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
                                    >
                                      descripción
                                    </button>
                                  </>
                                )}
                              </div>
                              <p className="text-sm text-gray-700 leading-relaxed">
                                {aboutLang === 'es' && school.aboutSpanish ? school.aboutSpanish : (school.about || '')}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Summary EntityCards Section */}
                    <DetailGrid>
                      {/* Location */}
                      <EntityCard title="Location" fields={[]} editable={false} showDivider={false}>
                        <GoogleMap 
                          latitude={school.activeLatitude} 
                          longitude={school.activeLongitude} 
                          schoolName={school.name}
                          shortName={school.shortName}
                          fallbackAddress={school.activePhysicalAddress}
                          schoolLogo={school.logoFlowerOnly || school.logoMainSquare || school.logo}
                        />
                      </EntityCard>

                      {/* Support - Current Operations Guide */}
                      <EntityCard
                        title="Support"
                        columns={1}
                        editable={false}
                        showDivider={false}
                        fields={[{
                          key: 'ssjOpsGuideTrack',
                          label: 'Ops Guide Track',
                          type: 'readonly',
                          value: Array.isArray(school?.ssjOpsGuideTrack) ? school.ssjOpsGuideTrack : (school?.ssjOpsGuideTrack ? [school.ssjOpsGuideTrack as any] : []),
                          render: (v) => (
                            v && Array.isArray(v) && v.length > 0 ? (
                              <div className="flex flex-wrap gap-1">
                                {v.map((track: string, idx: number) => (
                                  <Badge key={idx} variant="secondary" className="text-xs">{track}</Badge>
                                ))}
                              </div>
                            ) : <span className="text-slate-400">-</span>
                          )
                        }]} 
                      />

                      {/* School Contact Info */}
                      <EntityCard
                        title="School Contact Info"
                        columns={1}
                        editable={false}
                        showDivider={false}
                        fields={[
                          { key: 'email', label: 'Email', type: 'readonly', value: school?.email ?? '', render: (val) => val ? (<a href={`mailto:${val}`} className="text-blue-600 hover:underline">{val}</a>) : <span className="text-slate-400">-</span> },
                          { key: 'phone', label: 'Phone', type: 'readonly', value: school?.phone ?? '', render: (val) => val ? (<a href={`tel:${val}`} className="text-blue-600 hover:underline">{val}</a>) : <span className="text-slate-400">-</span> },
                          { key: 'website', label: 'Website', type: 'readonly', value: school?.website ?? '', render: () => {
                            const url = school?.website || school?.facebook || school?.instagram || '';
                            const label = school?.website || school?.facebook || school?.instagram || '';
                            return url ? (<a href={url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">{label}</a>) : (<span className="text-slate-400">-</span>);
                          } },
                        ]}
                      />

                      {/* Leadership (summary) */}
                      <EntityCard
                        title="Leadership"
                        columns={1}
                        editable={false}
                        showDivider={false}
                        fields={[
                          { key: 'founders', label: 'Founders', type: 'readonly', value: school?.founders ?? [], render: (v) => (v && v.length ? v.join(', ') : <span className="text-slate-400">Not specified</span>) },
                          { key: 'currentTLs', label: 'Current TLs', type: 'readonly', value: school?.currentTLs ?? [], render: () => {
                            const v = school?.currentTLs;
                            if (typeof v === 'string') return v || <span className="text-slate-400">None assigned</span>;
                            if (Array.isArray(v) && v.length > 0) return v.join(', ');
                            return <span className="text-slate-400">None assigned</span>;
                          } },
                        ]}
                      />

                      {/* Size and Program (summary) */}
                      <EntityCard
                        title="Size and Program"
                        columns={1}
                        editable={false}
                        showDivider={false}
                        fields={[
                          { key: 'enrollmentCap', label: 'Enrollment Capacity', type: 'readonly', value: school?.enrollmentCap ?? '' },
                          { key: 'numberOfClassrooms', label: 'Number of Classrooms', type: 'readonly', value: school?.numberOfClassrooms ?? '' },
                          { key: 'programFocus', label: 'Program Focus', type: 'readonly', value: Array.isArray(school?.programFocus) ? school.programFocus.join(', ') : (school?.programFocus || '') },
                        ]}
                      />

                      {/* Status and Monitoring (summary) */}
                      <EntityCard
                        title="Status and Monitoring"
                        columns={1}
                        editable={false}
                        showDivider={false}
                        fields={[
                          { key: 'riskFactors', label: 'Risk Factors', type: 'readonly', value: school?.riskFactors ?? [], render: (v) => v && v.length ? (
                            <div className="flex flex-wrap gap-1">{v.map((x: string, i: number) => <Badge key={i} variant="destructive" className="text-xs">{x}</Badge>)}</div>
                          ) : <span className="text-slate-400">None</span> },
                          { key: 'watchlist', label: 'Watchlist', type: 'readonly', value: school?.watchlist ?? [], render: (v) => v && v.length ? (
                            <div className="flex flex-wrap gap-1">{v.map((x: string, i: number) => <Badge key={i} variant="outline" className="text-xs border-orange-300 text-orange-700">{x}</Badge>)}</div>
                          ) : <span className="text-slate-400">None</span> },
                          { key: 'errors', label: 'Errors', type: 'readonly', value: school?.errors ?? [], render: (v) => v && v.length ? (
                            <div className="flex flex-wrap gap-1">{v.map((x: string, i: number) => <Badge key={i} variant="destructive" className="text-xs">{x}</Badge>)}</div>
                          ) : <span className="text-slate-400">None</span> },
                        ]}
                      />
                    </DetailGrid>

                    {/* End Summary Cards */}
