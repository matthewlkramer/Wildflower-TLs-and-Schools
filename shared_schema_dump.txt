import { z } from "zod";
import { createInsertSchema } from "drizzle-zod";
import { pgTable, serial, text, integer, decimal, timestamp, boolean, jsonb } from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";

// Airtable-based schema for Wildflower Schools
// Charter interface for Charters table
export interface Charter {
  id: string; // Airtable record ID
  shortName?: string;
  fullName?: string;
  initialTargetCommunity?: string;
  projectedOpen?: string;
  initialTargetAges?: string;
  status?: string;
  created?: string;
  lastModified?: string;
}

export interface CharterRole {
  id: string;
  charterId: string;
  role?: string;
  name?: string;
  currentlyActive?: boolean;
  created?: string;
  lastModified?: string;
}

export interface CharterApplication {
  id: string;
  charterId: string;
  applicationName?: string;
  targetOpen?: string;
  status?: string;
  submissionDate?: string;
  created?: string;
  lastModified?: string;
}

export interface CharterAuthorizerContact {
  id: string;
  charterId: string;
  name?: string;
  organization?: string;
  email?: string;
  phone?: string;
  role?: string;
  created?: string;
  lastModified?: string;
}

export interface ReportSubmission {
  id: string;
  charterId: string;
  reportType?: string;
  dueDate?: string;
  submissionDate?: string;
  status?: string;
  created?: string;
  lastModified?: string;
}

export interface AssessmentData {
  id: string;
  charterId: string;
  assessmentType?: string;
  testDate?: string;
  results?: string;
  grade?: string;
  created?: string;
  lastModified?: string;
}

export interface CharterNote {
  id: string;
  charterId: string;
  headline?: string;
  notes?: string;
  createdBy?: string;
  dateEntered?: string;
  private?: boolean;
  created?: string;
  lastModified?: string;
}

export interface CharterActionStep {
  id: string;
  charterId: string;
  description?: string;
  assignee?: string;
  dueDate?: string;
  status?: string;
  complete?: boolean;
  created?: string;
  lastModified?: string;
}

export interface CharterGovernanceDocument {
  id: string;
  charterId: string;
  docType?: string;
  doc?: string;
  docUrl?: string;
  dateEntered?: string;
  created?: string;
  lastModified?: string;
}

export interface Charter990 {
  id: string;
  charterId: string;
  year?: string;
  docUrl?: string;
  dateEntered?: string;
  created?: string;
  lastModified?: string;
}

export interface Educator {
  id: string; // Airtable record ID
  fullName?: string;
  firstName?: string;
  nickname?: string;
  middleName?: string;
  lastName: string;
  primaryPhone?: string;
  secondaryPhone?: string;
  homeAddress?: string;


  // Demographics
  pronouns?: string;
  pronounsOther?: string;
  gender?: string;
  genderOther?: string;
  raceEthnicity?: string[];
  raceEthnicityOther?: string;
  lgbtqia?: boolean;
  primaryLanguage?: string[];
  otherLanguages?: string[];
  educationalAttainment?: string;
  householdIncome?: string;
  incomeBackground?: string;
  individualType?: string;
  
  montessoriCertified?: boolean;
  montessoriLeadGuideTrainings?: string[];

  discoveryStatus?: string;
  assignedPartner?: string[];
  assignedPartnerEmail?: string[];
  
  activeSchool?: string[];
  currentRole?: string[];
  activeSchoolStageStatus?: string[];

  
  targetCity?: string;
  targetState?: string;
  targetGeoCombined?: string;
  targetIntl?: string;
  firstContactNotesOnPreWildflowerEmployment?: string;
  firstContactWFSchoolEmploymentStatus?: string;
  firstContactRelocate?: string;
  firstContactGovernance?: string;
  firstContactAges?: string[];
  firstContactInterests?: string;

  // Early Cultivation Data
  source?: string;
  sendgridTemplateSelected?: string;
  sendgridSendDate?: string;
  routedTo?: string;
  assignedPartnerOverride?: string;
  personalEmailSent?: boolean;
  personalEmailSentDate?: string;
  personResponsibleForFollowUp?: string;
  oneOnOneSchedulingStatus?: string;
  
  opsGuideMeetingPrefTime?: string;
  opsGuideSpecificsChecklist?: string[];
  opsGuideReqPertinentInfo?: string[];
  opsGuideSupportTypeNeeded?: string[];
  opsGuideFundraisingOps?: string;
  activeHolaspirit?: boolean;
  holaspiritMemberID?: string;
  tcUserID?: string;
  inactiveFlag?: boolean;
  created?: string;
  lastModified?: string;
  createdBy?: string;
}

export interface School {
  id: string; // Airtable record ID
  name: string;
  shortName?: string;
  priorNames?: string;
  logo?: string;
  logoMainSquare?: string;
  logoFlowerOnly?: string;
  logoMainRectangle?: string;
  logoUrl?: string;
  programFocus?: string[];
  schoolCalendar?: string;
  schoolSchedule?: string;
  leftNetworkDate?: string;
  leftNetworkReason?: string;
  membershipStatus?: string;
  founders?: string[];
  currentTLs?: string[];
  currentGuides?: string[];
  narrative?: string;
  institutionalPartner?: string;
  about?: string;
  aboutSpanish?: string;
  agesServed?: string[];
  governanceModel?: string;
  status?: string;
  stageStatus?: string;  
  openDate?: string;
  enrollmentCap?: number;
  currentEnrollment?: number;
  numberOfClassrooms?: number;
  publicFundingSources?: string[];
  flexibleTuition?: string;
  activePodMember?: string;

  // Location
  activePhysicalAddress?: string;
  currentPhysicalAddress?: boolean; // Added for Airtable checkbox field
  currentMailingAddress?: boolean; // Added for Airtable checkbox field
  activeLocationCity?: string;
  activeLocationState?: string;
  locality?: string;
  activeLatitude?: number;
  activeLongitude?: number;
  ssjTargetCity?: string;
  ssjTargetState?: string;

  // Contact info
  phone?: string;
  email?: string;
  domain?: string;
  website?: string;
  instagram?: string;
  facebook?: string;


  // Membership
  membershipAgreementDate?: string;
  signedMembershipAgreement?: string;
  agreementVersion?: string;
  membershipFeeStatus?: string;
  membershipFeeAmount?: number;
  membershipTerminationLetter?: string;

  // Legal entity
  legalStructure?: string;
  EIN?: string;
  legalName?: string;
  incorporationDate?: string;
  currentFYEnd?: string;
  nonprofitStatus?: string;
  groupExemptionStatus?: string;
  groupExemptionDateGranted?: string;
  groupExemptionDateWithdrawn?: string;
  dateReceivedGroupExemption?: string;
  dateWithdrawnGroupExemption?: string;
  


  // SSJ/OSS Data
  ssjStage?: string;
  ssjTool?: string;
  ssjOriginalProjectedOpenDate?: string;
  ssjProjOpenSchoolYear?: string;
  ssjProjectedOpen?: string;

  enteredVisioningDate?: string;
  enteredPlanningDate?: string;
  enteredStartupDate?: string;
  ssjHasETLPartner?: string;
  ssjOpsGuideTrack?: string[];
  ssjReadinessRating?: string;
  
  ssjFacility?: string;
  ssjB4GStatus?: string;
  ssjDateSharedWithN4G?: string;
  building4GoodFirm?: string;

  ssjFundingGap?: string;
  ssjAmountRaised?: string;
  ssjLoanApprovedAmount?: string;
  ssjLoanEligibility?: string;
  ssjViableFundingPath?: string;
  ssjTotalStartupFundingReq?: string;
  ssjFundraisingNarrative?: string;
  ssjPlanningForWFFunding?: string;

  ssjBudgetReady?: string;
  ssjEnrollmentOnTrack?: string;
  ssjCohortStatus?: string;
  ssjBoardDevelopment?: string;
  ssjNameReserved?: string;
  ssjNextBigDecision?: string;
  
  planningAlbum?: string;
  visioningAlbum?: string;
  visioningAlbumComplete?: boolean;
  cohorts?: string[];

  riskFactors?: string[];
  watchlist?: string[];
  errors?: string[];
  activeAssignedPartnerEmail?: string;
  activeAssignedPartnerOverride?: string;
  activeAssignedPartnerShortName?: string;
  
  // Systems
  googleVoice?: string;
  budgetUtility?: string;
  admissionsSystem?: string;
  qbo?: string;
  websiteTool?: string;
  logoDesigner?: string;
  transparentClassroom?: string;
  tcAdmissions?: string;
  tcRecordkeeping?: string;
  gusto?: string;
  businessInsurance?: string;
  nameSelectionProposal?: string;
  trademarkFiled?: string;
  billComAccount?: string;
  googleWorkspacePath?: string;
  budgetLink?: string;
  bookkeeper?: string;
  selfReflection?: string;
  inactiveFlag?: string;

  lastModified?: string;
  createdTime?: string;
}

export interface EducatorSchoolAssociation {
  id: string;
  educatorId: string;
  schoolId: string;
  schoolShortName?: string;
  educatorName?: string;
  role?: string[];
  status?: string;
  stageStatus?: string;
  startDate?: string;
  endDate?: string;
  isActive?: boolean;
  created?: string;
  lastModified?: string;
}

export interface Location {
  id: string; // Airtable record ID
  schoolId: string;
  address?: string;
  currentPhysicalAddress?: boolean;
  currentMailingAddress?: boolean;
  locationType?: string;
  startDate?: string;
  endDate?: string;
  created?: string;
  lastModified?: string;
}

export interface GuideAssignment {
  id: string; // Airtable record ID
  schoolId: string;
  guideId: string;
  guideShortName?: string;
  type?: string;
  startDate?: string;
  endDate?: string;
  isActive?: boolean;
  created?: string;
  lastModified?: string;
}

export interface GovernanceDocument {
  id: string; // Airtable record ID
  schoolId: string;
  docType?: string;
  doc?: string;
  docUrl?: string;
  dateEntered?: string;
  created?: string;
  lastModified?: string;
}

export interface SchoolNote {
  id: string; // Airtable record ID
  schoolId: string;
  dateCreated?: string;
  createdBy?: string;
  notes?: string;
  headline?: string;
  lastModified?: string;
}

export interface EducatorNote {
  id: string; // Airtable record ID
  educatorId: string;
  dateCreated?: string;
  createdBy?: string;
  notes?: string;
  category?: string;
  priority?: string;
  created?: string;
  lastModified?: string;
}

// Note: MontessoriCertification and EventAttendance interfaces are defined later in the file to avoid duplicates

export interface Grant {
  id: string; // Airtable record ID
  schoolId: string;
  amount?: number;
  issuedDate?: string;
  issuedByShortName?: string;
  status?: string;
  timeOfGrantLegalName?: string;
  timeOfGrantTLs?: string;
  timeOfGrantAddress?: string;
  timeOfGrantEIN?: string;
  timeOfGrantNonprofitStatus?: string;
  timeOfGrantMembershipStatus?: string;
  timeOfGrant501c3Proof?: string;
  fundingSource?: string;
  grantPurpose?: string;
  grantPeriod?: string;
  accountingNotes?: string;
  textLedgerEntry?: string;
  automationStep?: string;
  prelimAdviceRequestTime?: string;
  fullAdviceRequestTime?: string;
  unsignedGrantAgreement?: string;
  signedGrantAgreement?: string;
  created?: string;
  lastModified?: string;
}

export interface Loan {
  id: string; // Airtable record ID
  schoolId: string;
  amount?: number;
  status?: string;
  interestRate?: number;
  maturityDate?: string;
  approxOutstanding?: number;
  notes?: string;
  paperwork?: string;
  created?: string;
  lastModified?: string;
}

export interface EmailAddress {
  id: string; // Airtable record ID
  educatorId?: string;
  email?: string;
  type?: string;
  isPrimary?: boolean;
  status?: string;
  notes?: string;
  created?: string;
  lastModified?: string;
}

// Zod schemas for validation
export const educatorSchema = z.object({
  fullName: z.string().optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  middleName: z.string().optional(),
  nickname: z.string().optional(),
  primaryPhone: z.string().optional(),
  secondaryPhone: z.string().optional(),
  homeAddress: z.string().optional(),
  pronouns: z.string().optional(),
  pronounsOther: z.string().optional(),
  gender: z.string().optional(),
  genderOther: z.string().optional(),
  raceEthnicity: z.array(z.string()).optional(),
  raceEthnicityOther: z.string().optional(),
  primaryLanguage: z.array(z.string()).optional(),
  otherLanguages: z.array(z.string()).optional(),
  educationalAttainment: z.string().optional(),
  montessoriCertified: z.boolean().optional(),
  certificationLevels: z.array(z.string()).optional(),
  certifier: z.array(z.string()).optional(),
  montessoriLeadGuideTrainings: z.array(z.string()).optional(),
  currentRole: z.array(z.string()).optional(),
  discoveryStatus: z.string().optional(),
  assignedPartner: z.array(z.string()).optional(),
  assignedPartnerEmail: z.array(z.string()).optional(),
  householdIncome: z.string().optional(),
  incomeBackground: z.string().optional(),
  individualType: z.string().optional(),
  targetCity: z.string().optional(),
  firstContactWFSchoolEmploymentStatus: z.string().optional(),
  firstContactNotesOnPreWildflowerEmployment: z.string().optional(),
  firstContactInitialInterestInGovernanceModel: z.array(z.string()).optional(),
  // Early Cultivation Data
  source: z.string().optional(),
  sendgridTemplateSelected: z.string().optional(),
  sendgridSendDate: z.string().optional(),
  routedTo: z.string().optional(),
  assignedPartnerOverride: z.string().optional(),
  personalEmailSent: z.boolean().optional(),
  personalEmailSentDate: z.string().optional(),
  personResponsibleForFollowUp: z.string().optional(),
  oneOnOneSchedulingStatus: z.string().optional(),
  activeHolaspirit: z.boolean().optional(),
  holaspiritMemberID: z.string().optional(),
  tcUserID: z.string().optional(),
  alsoAPartner: z.boolean().optional(),
  onSchoolBoard: z.string().optional(),
  everATLInAnOpenSchool: z.boolean().optional(),
});

export const schoolSchema = z.object({
  name: z.string().min(1, "School name is required"),
  shortName: z.string().optional(),
  priorNames: z.string().optional(),
  logo: z.string().optional(),
  logoMainSquare: z.string().optional(),
  logoFlowerOnly: z.string().optional(),
  logoMainRectangle: z.string().optional(),
  logoUrl: z.string().optional(),
  currentPhysicalAddress: z.boolean().optional(),
  currentMailingAddress: z.boolean().optional(),
  activeLocationCity: z.string().optional(),
  activeLocationState: z.string().optional(),
  targetCity: z.string().optional(),
  targetState: z.string().optional(),
  locality: z.string().optional(),
  targetCommunity: z.string().optional(),
  phone: z.string().optional(),
  email: z.string().email("Invalid email format").optional().or(z.literal("")),
  website: z.string().optional().or(z.literal("")),
  domain: z.string().optional(),
  instagram: z.string().optional(),
  facebook: z.string().optional(),
  narrative: z.string().optional(),
  institutionalPartner: z.string().optional(),
  opened: z.string().optional(),
  membershipStatus: z.string().optional(),
  founders: z.array(z.string()).optional(),
  membershipAgreementDate: z.string().optional(),
  signedMembershipAgreement: z.string().optional(),
  agreementVersion: z.string().optional(),
  about: z.string().optional(),
  aboutSpanish: z.string().optional(),
  agesServed: z.array(z.string()).optional(),
  programFocus: z.array(z.string()).optional(),
  schoolCalendar: z.string().optional(),
  schoolSchedule: z.string().optional(),
  flexibleTuition: z.string().optional(),
  schoolType: z.string().optional(),
  governanceModel: z.string().optional(),
  status: z.string().optional(),
  stageStatus: z.string().optional(),
  openDate: z.string().optional(),
  enrollmentCap: z.number().optional(),
  currentEnrollment: z.number().optional(),
  membershipFeeStatus: z.string().optional(),
  membershipFeeAmount: z.number().optional(),
  membershipTerminationLetter: z.string().optional(),
  publicFunding: z.boolean().optional(),
  charterStatus: z.string().optional(),
  authorizer: z.string().optional(),
  demographics: z.any().optional(),
  assessmentData: z.any().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  timezone: z.string().optional(),
  currentTLs: z.union([z.string(), z.number()]).optional(),
  currentGuides: z.array(z.string()).optional(),

  numberOfClassrooms: z.number().optional(),
  leftNetworkDate: z.string().optional(),
  leftNetworkReason: z.string().optional(),
  publicFundingSources: z.array(z.string()).optional(),
  activePhysicalAddress: z.string().optional(),
  activeLatitude: z.number().optional(),
  activeLongitude: z.number().optional(),
  // SSJ/OSS Data
  ssjStage: z.string().optional(),
  ssjTool: z.string().optional(),
  ssjTargetCity: z.string().optional(),
  ssjTargetState: z.string().optional(),
  ssjOriginalProjectedOpenDate: z.string().optional(),
  ssjProjOpenSchoolYear: z.string().optional(),
  ssjProjectedOpen: z.string().optional(),
  riskFactors: z.array(z.string()).optional(),
  watchlist: z.array(z.string()).optional(),
  errors: z.array(z.string()).optional(),
  activeAssignedPartnerEmail: z.string().optional(),
  activeAssignedPartnerOverride: z.string().optional(),
  activeAssignedPartnerShortName: z.string().optional(),
  groupExemptionStatus: z.string().optional(),
  groupExemptionDateGranted: z.string().optional(),
  groupExemptionDateWithdrawn: z.string().optional(),
  dateReceivedGroupExemption: z.string().optional(),
  dateWithdrawnGroupExemption: z.string().optional(),
  legalStructure: z.string().optional(),
  EIN: z.string().optional(),
  legalName: z.string().optional(),
  incorporationDate: z.string().optional(),
  currentFYEnd: z.string().optional(),
  nonprofitStatus: z.string().optional(),
  ssjBoardDevelopment: z.string().optional(),
  enteredVisioningDate: z.string().optional(),
  enteredPlanningDate: z.string().optional(),
  enteredStartupDate: z.string().optional(),
  ssjHasETLPartner: z.string().optional(),
  ssjOpsGuideTrack: z.array(z.string()).optional(),
  ssjReadinessRating: z.string().optional(),
  ssjFacility: z.string().optional(),
  ssjB4GStatus: z.string().optional(),
  ssjDateSharedWithN4G: z.string().optional(),
  building4GoodFirm: z.string().optional(),
  ssjFundingGap: z.string().optional(),
  ssjAmountRaised: z.string().optional(),
  ssjLoanApprovedAmount: z.string().optional(),
  ssjLoanEligibility: z.string().optional(),
  ssjViableFundingPath: z.string().optional(),
  ssjTotalStartupFundingReq: z.string().optional(),
  ssjTotalStartupFunding: z.string().optional(),
  ssjFundraisingNarrative: z.string().optional(),
  ssjPlanningForWFFunding: z.string().optional(),
  ssjBudgetReady: z.string().optional(),
  ssjEnrollmentOnTrack: z.string().optional(),
  ssjCohortStatus: z.string().optional(),
  ssjNameReserved: z.string().optional(),
  ssjNextBigDecision: z.string().optional(),
  planningAlbum: z.string().optional(),
  visioningAlbum: z.string().optional(),
  visioningAlbumComplete: z.boolean().optional(),
  activePodMember: z.string().optional(),
  cohorts: z.array(z.string()).optional(),
  // Systems
  googleVoice: z.string().optional(),
  budgetUtility: z.string().optional(),
  admissionsSystem: z.string().optional(),
  qbo: z.string().optional(),
  websiteTool: z.string().optional(),
  logoDesigner: z.string().optional(),
  transparentClassroom: z.string().optional(),
  tcAdmissions: z.string().optional(),
  tcRecordkeeping: z.string().optional(),
  gusto: z.string().optional(),
  businessInsurance: z.string().optional(),
  nameSelectionProposal: z.string().optional(),
  trademarkFiled: z.string().optional(),
  billComAccount: z.string().optional(),
  googleWorkspacePath: z.string().optional(),
  budgetLink: z.string().optional(),
  bookkeeper: z.string().optional(),
  selfReflection: z.string().optional(),
  firstContactRelocate: z.string().optional(),
  firstContactGovernance: z.string().optional(),
  firstContactPreWFEmployment: z.string().optional(),
  firstContactWFSchoolEmployee: z.string().optional(),
  firstContactAges: z.array(z.string()).optional(),
  firstContactInterests: z.string().optional(),
  opsGuideMeetingPrefTime: z.string().optional(),
  opsGuideSpecificsChecklist: z.array(z.string()).optional(),
  opsGuideReqPertinentInfo: z.array(z.string()).optional(),
  opsGuideSupportTypeNeeded: z.array(z.string()).optional(),
  opsGuideFundraisingOps: z.string().optional(),
  inactiveFlag: z.string().optional(),
  createdTime: z.string().optional(),
  lastModified: z.string().optional(),
});

export const educatorSchoolAssociationSchema = z.object({
  educatorId: z.string().min(1, "Educator ID is required"),
  schoolId: z.string().min(1, "School ID is required"),
  schoolShortName: z.string().optional(),
  role: z.array(z.string()).optional(),
  status: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  emailAtSchool: z.string().optional(),
  isPrimary: z.boolean().optional(),
  isActive: z.boolean().optional(),
});

export const locationSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  address: z.string().optional(),
  currentPhysicalAddress: z.boolean().optional(),
  currentMailingAddress: z.boolean().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
});

export const guideAssignmentSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  guideId: z.string().min(1, "Guide ID is required"),
  guideShortName: z.string().optional(),
  type: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  isActive: z.boolean().optional(),
});

export const governanceDocumentSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  docType: z.string().optional(),
  doc: z.string().optional(),
  dateEntered: z.string().optional(),
});

export const schoolNoteSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  dateCreated: z.string().optional(),
  createdBy: z.string().optional(),
  notes: z.string().optional(),
});

export const grantSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  amount: z.number().optional(),
  issuedDate: z.string().optional(),
  issuedBy: z.string().optional(),
  status: z.string().optional(),
});

export const loanSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  amount: z.number().optional(),
  status: z.string().optional(),
  interestRate: z.number().optional(),
});

export const membershipFeeByYearSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  schoolYear: z.string().min(1, "School year is required"),
  feeAmount: z.number().optional(),
  status: z.string().optional(),
  dueDate: z.string().optional(),
  datePaid: z.string().optional(),
  paymentMethod: z.string().optional(),
  notes: z.string().optional(),
});

export const membershipFeeUpdateSchema = z.object({
  schoolId: z.string().min(1, "School ID is required"),
  schoolYear: z.string().optional(),
  updateDate: z.string().optional(),
  updatedBy: z.string().optional(),
  updateType: z.string().optional(),
  previousValue: z.string().optional(),
  newValue: z.string().optional(),
  notes: z.string().optional(),
});

export const emailAddressSchema = z.object({
  educatorId: z.string().optional(),
  email: z.string().email("Invalid email format").optional(),
  type: z.string().optional(),
  isPrimary: z.boolean().optional(),
  status: z.string().optional(),
  notes: z.string().optional(),
});

export interface MembershipFeeByYear {
  id: string;
  schoolId: string;
  schoolYear: string;
  feeAmount?: number;
  status?: string;
  dueDate?: string;
  datePaid?: string;
  paymentMethod?: string;
  notes?: string;
  likelihoodOfPaying?: number;
}

export interface MembershipFeeUpdate {
  id: string;
  schoolId: string;
  schoolYear?: string;
  updateDate?: string;
  updatedBy?: string;
  updateType?: string;
  previousValue?: string;
  newValue?: string;
  notes?: string;
  attachment?: string;
}

// SSJ Fillout Forms
export interface SSJFilloutForm {
  id: string; // Airtable record ID
  educatorId?: string;
  formName?: string;
  formType?: string;
  dateSubmitted?: string;
  status?: string;
  submissionId?: string;
  responseData?: any;
  notes?: string;
  created?: string;
  lastModified?: string;
}

// Montessori Certifications
export interface MontessoriCertification {
  id: string; // Airtable record ID
  educatorId?: string;
  certificationLevel?: string;
  certificationStatus?: string;
  certifier?: string;
  trainingProgram?: string;
  dateReceived?: string;
  expirationDate?: string;
  certificationNumber?: string;
  notes?: string;
  created?: string;
  lastModified?: string;
}

// Event Attendance
export interface EventAttendance {
  id: string; // Airtable record ID
  educatorId?: string;
  eventName?: string;
  eventType?: string;
  eventDate?: string;
  attendanceStatus?: string;
  registrationDate?: string;
  completionStatus?: string;
  certificateIssued?: boolean;
  notes?: string;
  created?: string;
  lastModified?: string;
}

// Duplicate interfaces removed - using the more comprehensive versions defined earlier

export const ssjFilloutFormSchema = z.object({
  educatorId: z.string().optional(),
  formName: z.string().optional(),
  formType: z.string().optional(),
  dateSubmitted: z.string().optional(),
  status: z.string().optional(),
  submissionId: z.string().optional(),
  responseData: z.any().optional(),
  notes: z.string().optional(),
});

export const montessoriCertificationSchema = z.object({
  educatorId: z.string().optional(),
  certificationLevel: z.string().optional(),
  certificationStatus: z.string().optional(),
  certifier: z.string().optional(),
  trainingProgram: z.string().optional(),
  dateReceived: z.string().optional(),
  expirationDate: z.string().optional(),
  certificationNumber: z.string().optional(),
  notes: z.string().optional(),
});

export const eventAttendanceSchema = z.object({
  educatorId: z.string().optional(),
  eventName: z.string().optional(),
  eventType: z.string().optional(),
  eventDate: z.string().optional(),
  attendanceStatus: z.string().optional(),
  registrationDate: z.string().optional(),
  completionStatus: z.string().optional(),
  certificateIssued: z.boolean().optional(),
  notes: z.string().optional(),
});

export const educatorNoteSchema = z.object({
  educatorId: z.string().optional(),
  dateCreated: z.string().optional(),
  createdBy: z.string().optional(),
  notes: z.string().optional(),
  category: z.string().optional(),
  priority: z.string().optional(),
});

export type InsertEducator = z.infer<typeof educatorSchema>;
export type InsertSchool = z.infer<typeof schoolSchema>;
export type InsertEducatorSchoolAssociation = z.infer<typeof educatorSchoolAssociationSchema>;
export type InsertLocation = z.infer<typeof locationSchema>;
export type InsertGuideAssignment = z.infer<typeof guideAssignmentSchema>;
export type InsertGovernanceDocument = z.infer<typeof governanceDocumentSchema>;
export type InsertSchoolNote = z.infer<typeof schoolNoteSchema>;

// Action Step Schema
export const actionStepSchema = z.object({
  schoolId: z.string(),
  assignedDate: z.string().optional(),
  assignee: z.string().optional(),
  item: z.string().optional(),
  status: z.string().optional(),
  dueDate: z.string().optional(),
  isCompleted: z.boolean().optional(),
});

export const tax990Schema = z.object({
  schoolId: z.string(),
  year: z.string().optional(),
  attachment: z.string().optional(),
  attachmentUrl: z.string().optional(),
});

export type InsertActionStep = z.infer<typeof actionStepSchema>;
export type InsertTax990 = z.infer<typeof tax990Schema>;
export type InsertGrant = z.infer<typeof grantSchema>;
export type InsertLoan = z.infer<typeof loanSchema>;
export type InsertMembershipFeeByYear = z.infer<typeof membershipFeeByYearSchema>;
export type InsertMembershipFeeUpdate = z.infer<typeof membershipFeeUpdateSchema>;
export type InsertEmailAddress = z.infer<typeof emailAddressSchema>;
export type InsertSSJFilloutForm = z.infer<typeof ssjFilloutFormSchema>;
export type InsertMontessoriCertification = z.infer<typeof montessoriCertificationSchema>;
export type InsertEventAttendance = z.infer<typeof eventAttendanceSchema>;
export type InsertEducatorNote = z.infer<typeof educatorNoteSchema>;

// Charter-related types
export interface CharterRole {
  id: string;
  charterId: string;
  role: string;
  name: string;
  currentlyActive: boolean;
  created: string;
  lastModified: string;
}

export interface CharterApplication {
  id: string;
  charterId: string;
  applicationName: string;
  targetOpen: string;
  status: string;
  submissionDate: string;
  created: string;
  lastModified: string;
}

export interface CharterAuthorizerContact {
  id: string;
  charterId: string;
  name: string;
  role: string;
  email: string;
  phone: string;
  created: string;
  lastModified: string;
}

export interface ReportSubmission {
  id: string;
  charterId: string;
  reportName: string;
  submissionDate: string;
  status: string;
  created: string;
  lastModified: string;
}

export interface AssessmentData {
  id: string;
  charterId: string;
  assessmentName: string;
  assessmentDate: string;
  score: string;
  created: string;
  lastModified: string;
}

export interface CharterNote {
  id: string;
  charterId: string;
  dateCreated: string;
  createdBy: string;
  notes: string;
  created: string;
  lastModified: string;
}

export interface CharterActionStep {
  id: string;
  charterId: string;
  description: string;
  assignee: string;
  dueDate: string;
  status: string;
  complete: boolean;
  created: string;
  lastModified: string;
}

export interface CharterGovernanceDocument {
  id: string;
  charterId: string;
  documentType: string;
  date: string;
  attachment: string;
  created: string;
  lastModified: string;
}

export interface Charter990 {
  id: string;
  charterId: string;
  year: string;
  attachment: string;
  created: string;
  lastModified: string;
}

// Legacy types for backward compatibility
export type Teacher = Educator;
export type InsertTeacher = InsertEducator;
export type TeacherSchoolAssociation = EducatorSchoolAssociation;
export type InsertTeacherSchoolAssociation = InsertEducatorSchoolAssociation;

// Legacy schemas for backward compatibility
export const insertTeacherSchema = educatorSchema;
export const insertSchoolSchema = schoolSchema;
export const insertTeacherSchoolAssociationSchema = educatorSchoolAssociationSchema;

// ======================================
// LOAN MANAGEMENT SYSTEM TABLES
// ======================================

// Loan Applications - Initial loan requests
export const loanApplications = pgTable("loan_applications", {
  id: serial("id").primaryKey(),
  applicationNumber: text("application_number").unique().notNull(),
  borrowerName: text("borrower_name").notNull(),
  schoolId: text("school_id"), // Optional link to existing school
  requestedAmount: decimal("requested_amount", { precision: 12, scale: 2 }).notNull(),
  purpose: text("purpose").notNull(),
  applicationDate: timestamp("application_date").defaultNow(),
  status: text("status").notNull().default("submitted"), // submitted, under_review, approved, denied
  assignedUnderwriter: text("assigned_underwriter"),
  
  // Contact Information
  contactEmail: text("contact_email").notNull(),
  contactPhone: text("contact_phone"),
  businessAddress: text("business_address"),
  
  // Basic Financial Info
  annualRevenue: decimal("annual_revenue", { precision: 12, scale: 2 }),
  existingDebt: decimal("existing_debt", { precision: 12, scale: 2 }),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Borrowers - Can be schools or other entities
export const borrowers = pgTable("borrowers", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  type: text("type").notNull(), // school, organization, individual
  schoolId: text("school_id"), // Link to existing school if applicable
  
  // Contact Information
  primaryContactName: text("primary_contact_name"),
  primaryContactEmail: text("primary_contact_email"),
  primaryContactPhone: text("primary_contact_phone"),
  businessAddress: text("business_address"),
  
  // Geographic and school tracking
  schoolNumber: integer("school_number"),
  state: text("state"),
  censusTract: text("census_tract"),
  
  // CDFI eligibility tracking
  cdfiTract2015: boolean("cdfi_tract_2015"),
  cdfiTract2020: boolean("cdfi_tract_2020"),
  schoolCdfiTract: boolean("school_cdfi_tract"),
  disadvantagedCommunity: boolean("disadvantaged_community"),
  climateDisadvantaged: boolean("climate_disadvantaged"),
  
  // Charter and school characteristics
  isCharter: boolean("is_charter"),
  currentTeacherMentoring: boolean("current_teacher_mentoring"),
  anyTeacherMentoring: boolean("any_teacher_mentoring"),
  childcareDesert: boolean("childcare_desert"),
  
  // Demographics (percentages)
  percentLowIncomeTransition: decimal("percent_low_income_transition", { precision: 5, scale: 2 }),
  percentAfricanAmerican: decimal("percent_african_american", { precision: 5, scale: 2 }),
  percentLatino: decimal("percent_latino", { precision: 5, scale: 2 }),
  
  // School characteristics
  schoolHighPoverty: boolean("school_high_poverty"),
  schoolHighPotential: boolean("school_high_potential"),
  bipocTeacherLeader: boolean("bipoc_teacher_leader"),
  lowIncomeTeacherLeader: boolean("low_income_teacher_leader"),
  womanTeacherLeader: boolean("woman_teacher_leader"),
  
  // Contact information
  email1: text("email_1"),
  email2: text("email_2"),
  email3: text("email_3"),
  
  // Business Information
  taxId: text("tax_id"),
  incorporationState: text("incorporation_state"),
  businessType: text("business_type"), // LLC, Corporation, Non-profit
  yearEstablished: integer("year_established"),
  
  // Financial Information
  annualRevenue: decimal("annual_revenue", { precision: 12, scale: 2 }),
  totalAssets: decimal("total_assets", { precision: 12, scale: 2 }),
  totalLiabilities: decimal("total_liabilities", { precision: 12, scale: 2 }),
  
  creditScore: integer("credit_score"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Loans - Originated loans
export const loans = pgTable("loans", {
  id: serial("id").primaryKey(),
  loanNumber: text("loan_number").unique().notNull(),
  applicationId: integer("application_id").references(() => loanApplications.id),
  borrowerId: integer("borrower_id").references(() => borrowers.id).notNull(),
  
  // Loan Terms
  principalAmount: decimal("principal_amount", { precision: 12, scale: 2 }).notNull(),
  interestRate: decimal("interest_rate", { precision: 5, scale: 4 }).notNull(), // e.g., 0.0750 for 7.5%
  termMonths: integer("term_months").notNull(),
  
  // Interest-only and repayment periods
  interestOnlyMonths: integer("interest_only_months").default(0),
  repaymentStartDate: timestamp("repayment_start_date"),
  
  // Payment Information
  monthlyPayment: decimal("monthly_payment", { precision: 12, scale: 2 }),
  paymentDueDay: integer("payment_due_day").default(1), // Day of month payment is due
  
  // Loan Status
  status: text("status").notNull().default("pending"), // pending, active, paid_off, default, charged_off
  originationDate: timestamp("origination_date"),
  maturityDate: timestamp("maturity_date"),
  
  // CSV tracking fields
  fiscalYear: integer("fiscal_year"),
  calendarYear: integer("calendar_year"),
  issueDate: timestamp("issue_date"),
  useOfProceeds: text("use_of_proceeds"),
  notes: text("notes"),
  
  // Current Balances
  currentPrincipalBalance: decimal("current_principal_balance", { precision: 12, scale: 2 }),
  totalInterestPaid: decimal("total_interest_paid", { precision: 12, scale: 2 }).default("0"),
  totalFeesPaid: decimal("total_fees_paid", { precision: 12, scale: 2 }).default("0"),
  
  // Loan Officer/Servicer
  loanOfficer: text("loan_officer"),
  servicer: text("servicer"),
  
  // Origination Workflow Tracking
  originationStatus: text("origination_status").default("pending_approval"), // pending_approval, approved, documents_pending, ach_pending, ready_to_fund, funded
  promissoryNoteSigned: boolean("promissory_note_signed").default(false),
  promissoryNoteSignedDate: timestamp("promissory_note_signed_date"),
  achSetupCompleted: boolean("ach_setup_completed").default(false),
  achSetupCompletedDate: timestamp("ach_setup_completed_date"),
  fundsDistributed: boolean("funds_distributed").default(false),
  fundsDistributedDate: timestamp("funds_distributed_date"),
  
  // Stripe Integration
  stripeConnectAccountId: text("stripe_connect_account_id"),
  stripeCustomerId: text("stripe_customer_id"),
  stripeBankAccountId: text("stripe_bank_account_id"),
  achMandateAccepted: boolean("ach_mandate_accepted").default(false),
  achMandateAcceptedDate: timestamp("ach_mandate_accepted_date"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Loan Payments - Payment history and schedules
export const loanPayments = pgTable("loan_payments", {
  id: serial("id").primaryKey(),
  loanId: integer("loan_id").references(() => loans.id).notNull(),
  
  // Payment Details
  paymentNumber: integer("payment_number").notNull(),
  scheduledDate: timestamp("scheduled_date").notNull(),
  paymentDate: timestamp("payment_date"),
  
  // Amounts
  scheduledAmount: decimal("scheduled_amount", { precision: 12, scale: 2 }).notNull(),
  actualAmount: decimal("actual_amount", { precision: 12, scale: 2 }),
  principalAmount: decimal("principal_amount", { precision: 12, scale: 2 }),
  interestAmount: decimal("interest_amount", { precision: 12, scale: 2 }),
  feesAmount: decimal("fees_amount", { precision: 12, scale: 2 }).default("0"),
  
  // Status
  status: text("status").notNull().default("scheduled"), // scheduled, paid, late, missed
  paymentMethod: text("payment_method"), // ach, wire, check, online
  
  // Late payment tracking
  daysLate: integer("days_late").default(0),
  lateFee: decimal("late_fee", { precision: 12, scale: 2 }).default("0"),
  
  notes: text("notes"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Loan Documents - All documentation
export const loanDocuments = pgTable("loan_documents", {
  id: serial("id").primaryKey(),
  loanId: integer("loan_id").references(() => loans.id),
  applicationId: integer("application_id").references(() => loanApplications.id),
  
  documentType: text("document_type").notNull(), // application, financial_statement, credit_report, loan_agreement, etc.
  documentName: text("document_name").notNull(),
  documentPath: text("document_path"), // File path or URL
  documentSize: integer("document_size"), // File size in bytes
  
  uploadedBy: text("uploaded_by"),
  uploadDate: timestamp("upload_date").defaultNow(),
  
  // Document status
  status: text("status").notNull().default("pending"), // pending, approved, rejected, requires_update
  reviewedBy: text("reviewed_by"),
  reviewDate: timestamp("review_date"),
  reviewNotes: text("review_notes"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Loan Covenants - Compliance tracking
export const loanCovenants = pgTable("loan_covenants", {
  id: serial("id").primaryKey(),
  loanId: integer("loan_id").references(() => loans.id).notNull(),
  
  covenantType: text("covenant_type").notNull(), // financial, operational, reporting
  description: text("description").notNull(),
  
  // Financial covenant specifics
  metricType: text("metric_type"), // debt_to_equity, current_ratio, debt_service_coverage, etc.
  thresholdValue: decimal("threshold_value", { precision: 12, scale: 4 }),
  comparisonOperator: text("comparison_operator"), // >=, <=, =, >, <
  
  // Reporting requirements
  reportingFrequency: text("reporting_frequency"), // monthly, quarterly, annually
  nextReportingDate: timestamp("next_reporting_date"),
  
  // Compliance status
  status: text("status").notNull().default("compliant"), // compliant, violation, waived, cured
  lastTestDate: timestamp("last_test_date"),
  lastTestValue: decimal("last_test_value", { precision: 12, scale: 4 }),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Loan Committee Reviews - Approval workflow
export const loanCommitteeReviews = pgTable("loan_committee_reviews", {
  id: serial("id").primaryKey(),
  applicationId: integer("application_id").references(() => loanApplications.id).notNull(),
  
  // Review Details
  reviewDate: timestamp("review_date").notNull(),
  reviewerName: text("reviewer_name").notNull(),
  reviewerRole: text("reviewer_role"), // committee_chair, member, credit_analyst
  
  // Recommendation
  recommendation: text("recommendation").notNull(), // approve, deny, conditional_approval, request_more_info
  recommendedAmount: decimal("recommended_amount", { precision: 12, scale: 2 }),
  recommendedRate: decimal("recommended_rate", { precision: 5, scale: 4 }),
  recommendedTermMonths: integer("recommended_term_months"),
  
  // Comments and conditions
  comments: text("comments"),
  conditions: text("conditions"), // Approval conditions if any
  
  // Final committee decision
  finalDecision: text("final_decision"), // approved, denied, deferred
  decisionDate: timestamp("decision_date"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Capital Sources - Available funding
export const capitalSources = pgTable("capital_sources", {
  id: serial("id").primaryKey(),
  sourceName: text("source_name").notNull(),
  sourceType: text("source_type").notNull(), // investor, bank_line, internal_funds
  
  // Available amounts
  totalCommitment: decimal("total_commitment", { precision: 12, scale: 2 }).notNull(),
  availableAmount: decimal("available_amount", { precision: 12, scale: 2 }).notNull(),
  utilizedAmount: decimal("utilized_amount", { precision: 12, scale: 2 }).default("0"),
  
  // Terms
  costOfCapital: decimal("cost_of_capital", { precision: 5, scale: 4 }), // Interest rate we pay
  
  // Contact Information
  contactName: text("contact_name"),
  contactEmail: text("contact_email"),
  contactPhone: text("contact_phone"),
  
  // Status
  status: text("status").notNull().default("active"), // active, inactive, expired
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Quarterly Reports - For investors and regulators
export const quarterlyReports = pgTable("quarterly_reports", {
  id: serial("id").primaryKey(),
  
  // Report Period
  reportYear: integer("report_year").notNull(),
  reportQuarter: integer("report_quarter").notNull(), // 1, 2, 3, 4
  
  // Portfolio Summary
  totalLoansOriginated: integer("total_loans_originated").notNull(),
  totalPrincipalOriginated: decimal("total_principal_originated", { precision: 12, scale: 2 }).notNull(),
  totalActiveLoans: integer("total_active_loans").notNull(),
  totalOutstandingPrincipal: decimal("total_outstanding_principal", { precision: 12, scale: 2 }).notNull(),
  
  // Performance Metrics
  defaultRate: decimal("default_rate", { precision: 5, scale: 4 }),
  averageInterestRate: decimal("average_interest_rate", { precision: 5, scale: 4 }),
  netChargeOffs: decimal("net_charge_offs", { precision: 12, scale: 2 }).default("0"),
  
  // Capital Deployment
  capitalDeployed: decimal("capital_deployed", { precision: 12, scale: 2 }).notNull(),
  capitalAvailable: decimal("capital_available", { precision: 12, scale: 2 }).notNull(),
  
  // Generated Financial Statements
  balanceSheetPath: text("balance_sheet_path"),
  incomeStatementPath: text("income_statement_path"),
  cashFlowStatementPath: text("cash_flow_statement_path"),
  
  // Report generation
  generatedBy: text("generated_by").notNull(),
  generatedDate: timestamp("generated_date").defaultNow(),
  approvedBy: text("approved_by"),
  approvedDate: timestamp("approved_date"),
  
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Loan Management Relations
export const loanApplicationsRelations = relations(loanApplications, ({ many, one }) => ({
  loans: many(loans),
  documents: many(loanDocuments),
  committeeReviews: many(loanCommitteeReviews),
}));

export const borrowersRelations = relations(borrowers, ({ many }) => ({
  loans: many(loans),
}));

export const loansRelations = relations(loans, ({ one, many }) => ({
  application: one(loanApplications, {
    fields: [loans.applicationId],
    references: [loanApplications.id],
  }),
  borrower: one(borrowers, {
    fields: [loans.borrowerId],
    references: [borrowers.id],
  }),
  payments: many(loanPayments),
  documents: many(loanDocuments),
  covenants: many(loanCovenants),
}));

export const loanPaymentsRelations = relations(loanPayments, ({ one }) => ({
  loan: one(loans, {
    fields: [loanPayments.loanId],
    references: [loans.id],
  }),
}));

export const loanDocumentsRelations = relations(loanDocuments, ({ one }) => ({
  loan: one(loans, {
    fields: [loanDocuments.loanId],
    references: [loans.id],
  }),
  application: one(loanApplications, {
    fields: [loanDocuments.applicationId],
    references: [loanApplications.id],
  }),
}));

export const loanCovenantsRelations = relations(loanCovenants, ({ one }) => ({
  loan: one(loans, {
    fields: [loanCovenants.loanId],
    references: [loans.id],
  }),
}));

export const loanCommitteeReviewsRelations = relations(loanCommitteeReviews, ({ one }) => ({
  application: one(loanApplications, {
    fields: [loanCommitteeReviews.applicationId],
    references: [loanApplications.id],
  }),
}));

// Loan Management Type Exports (using LoanRecord to avoid conflict with Airtable Loan interface)
export type LoanApplication = typeof loanApplications.$inferSelect;
export type InsertLoanApplication = typeof loanApplications.$inferInsert;
export type Borrower = typeof borrowers.$inferSelect;
export type InsertBorrower = typeof borrowers.$inferInsert;
export type LoanRecord = typeof loans.$inferSelect;
export type InsertLoanRecord = typeof loans.$inferInsert;
export type LoanPayment = typeof loanPayments.$inferSelect;
export type InsertLoanPayment = typeof loanPayments.$inferInsert;
export type LoanDocument = typeof loanDocuments.$inferSelect;
export type InsertLoanDocument = typeof loanDocuments.$inferInsert;
export type LoanCovenant = typeof loanCovenants.$inferSelect;
export type InsertLoanCovenant = typeof loanCovenants.$inferInsert;
export type LoanCommitteeReview = typeof loanCommitteeReviews.$inferSelect;
export type InsertLoanCommitteeReview = typeof loanCommitteeReviews.$inferInsert;
export type CapitalSource = typeof capitalSources.$inferSelect;
export type InsertCapitalSource = typeof capitalSources.$inferInsert;
export type QuarterlyReport = typeof quarterlyReports.$inferSelect;
export type InsertQuarterlyReport = typeof quarterlyReports.$inferInsert;

// Origination Workflow Types
export type OriginationStatus = 
  | "pending_approval"
  | "approved" 
  | "documents_pending"
  | "ach_pending"
  | "ready_to_fund"
  | "funded";

// Promissory Note Templates for loan documentation
export const promissoryNoteTemplates = pgTable("promissory_note_templates", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(), // e.g., "Sunlight Promissory Note", "Founder's Promissory Note"
  templateType: text("template_type").notNull(), // "standard", "founders", "bridge", etc.
  version: integer("version").notNull(), // version number for template history
  content: text("content").notNull(), // full template content with placeholder fields
  variableFields: jsonb("variable_fields"), // array of field definitions
  isActive: boolean("is_active").notNull().default(true),
  createdBy: text("created_by").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Template Field Definitions for dynamic form generation
export const templateFields = pgTable("template_fields", {
  id: serial("id").primaryKey(),
  templateId: integer("template_id").references(() => promissoryNoteTemplates.id).notNull(),
  fieldName: text("field_name").notNull(), // e.g., "SCHOOL_NAME", "LOAN_AMOUNT"
  fieldLabel: text("field_label").notNull(), // e.g., "School Name", "Loan Amount"
  fieldType: text("field_type").notNull(), // "text", "number", "date", "currency", "address"
  placeholder: text("placeholder").notNull(), // e.g., "[SCHOOL NAME]", "$[ ]"
  isRequired: boolean("is_required").notNull().default(true),
  defaultValue: text("default_value"),
  validationRules: jsonb("validation_rules"), // regex, min/max values, etc.
  sortOrder: integer("sort_order").notNull().default(0),
  createdAt: timestamp("created_at").defaultNow(),
});

// Generated Documents (when templates are filled out for specific loans)
export const generatedDocuments = pgTable("generated_documents", {
  id: serial("id").primaryKey(),
  loanId: integer("loan_id").notNull(), // references loan from loan-schema
  templateId: integer("template_id").references(() => promissoryNoteTemplates.id).notNull(),
  documentType: text("document_type").notNull(), // "promissory_note", "security_agreement", etc.
  generatedContent: text("generated_content").notNull(), // filled template
  fieldValues: jsonb("field_values").notNull(), // values used to fill the template
  generatedBy: text("generated_by").notNull(),
  generatedAt: timestamp("generated_at").defaultNow(),
  status: text("status").notNull().default("draft"), // draft, reviewed, signed, executed
  filePath: text("file_path"), // path to generated PDF/DOCX file
});

// Promissory Note Template Relations
export const promissoryNoteTemplatesRelations = relations(promissoryNoteTemplates, ({ many }) => ({
  fields: many(templateFields),
  generatedDocuments: many(generatedDocuments),
}));

export const templateFieldsRelations = relations(templateFields, ({ one }) => ({
  template: one(promissoryNoteTemplates, {
    fields: [templateFields.templateId],
    references: [promissoryNoteTemplates.id],
  }),
}));

export const generatedDocumentsRelations = relations(generatedDocuments, ({ one }) => ({
  template: one(promissoryNoteTemplates, {
    fields: [generatedDocuments.templateId],
    references: [promissoryNoteTemplates.id],
  }),
}));

// Promissory Note Type Exports
export type PromissoryNoteTemplate = typeof promissoryNoteTemplates.$inferSelect;
export type InsertPromissoryNoteTemplate = typeof promissoryNoteTemplates.$inferInsert;
export type TemplateField = typeof templateFields.$inferSelect;
export type InsertTemplateField = typeof templateFields.$inferInsert;
export type GeneratedDocument = typeof generatedDocuments.$inferSelect;
export type InsertGeneratedDocument = typeof generatedDocuments.$inferInsert;



